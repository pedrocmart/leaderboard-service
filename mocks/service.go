// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/pedrocmart/leaderboard-service/models"
	"sync"
)

// Ensure, that ServiceMock does implement models.Service.
// If this is not the case, regenerate this file with moq.
var _ models.Service = &ServiceMock{}

// ServiceMock is a mock implementation of models.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked models.Service
// 		mockedService := &ServiceMock{
// 			HandleGetRankingFunc: func(contextMoqParam context.Context, s string) (*models.GetRankingResponse, error) {
// 				panic("mock out the HandleGetRanking method")
// 			},
// 			HandleSubmitScoreFunc: func(contextMoqParam context.Context, submitScoreRequest *models.SubmitScoreRequest, s string) (*models.SubmitScoreResponse, error) {
// 				panic("mock out the HandleSubmitScore method")
// 			},
// 		}
//
// 		// use mockedService in code that requires models.Service
// 		// and then make assertions.
//
// 	}
type ServiceMock struct {
	// HandleGetRankingFunc mocks the HandleGetRanking method.
	HandleGetRankingFunc func(contextMoqParam context.Context, s string) (*models.GetRankingResponse, error)

	// HandleSubmitScoreFunc mocks the HandleSubmitScore method.
	HandleSubmitScoreFunc func(contextMoqParam context.Context, submitScoreRequest *models.SubmitScoreRequest, s string) (*models.SubmitScoreResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// HandleGetRanking holds details about calls to the HandleGetRanking method.
		HandleGetRanking []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// HandleSubmitScore holds details about calls to the HandleSubmitScore method.
		HandleSubmitScore []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// SubmitScoreRequest is the submitScoreRequest argument value.
			SubmitScoreRequest *models.SubmitScoreRequest
			// S is the s argument value.
			S string
		}
	}
	lockHandleGetRanking  sync.RWMutex
	lockHandleSubmitScore sync.RWMutex
}

// HandleGetRanking calls HandleGetRankingFunc.
func (mock *ServiceMock) HandleGetRanking(contextMoqParam context.Context, s string) (*models.GetRankingResponse, error) {
	if mock.HandleGetRankingFunc == nil {
		panic("ServiceMock.HandleGetRankingFunc: method is nil but Service.HandleGetRanking was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockHandleGetRanking.Lock()
	mock.calls.HandleGetRanking = append(mock.calls.HandleGetRanking, callInfo)
	mock.lockHandleGetRanking.Unlock()
	return mock.HandleGetRankingFunc(contextMoqParam, s)
}

// HandleGetRankingCalls gets all the calls that were made to HandleGetRanking.
// Check the length with:
//     len(mockedService.HandleGetRankingCalls())
func (mock *ServiceMock) HandleGetRankingCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockHandleGetRanking.RLock()
	calls = mock.calls.HandleGetRanking
	mock.lockHandleGetRanking.RUnlock()
	return calls
}

// HandleSubmitScore calls HandleSubmitScoreFunc.
func (mock *ServiceMock) HandleSubmitScore(contextMoqParam context.Context, submitScoreRequest *models.SubmitScoreRequest, s string) (*models.SubmitScoreResponse, error) {
	if mock.HandleSubmitScoreFunc == nil {
		panic("ServiceMock.HandleSubmitScoreFunc: method is nil but Service.HandleSubmitScore was just called")
	}
	callInfo := struct {
		ContextMoqParam    context.Context
		SubmitScoreRequest *models.SubmitScoreRequest
		S                  string
	}{
		ContextMoqParam:    contextMoqParam,
		SubmitScoreRequest: submitScoreRequest,
		S:                  s,
	}
	mock.lockHandleSubmitScore.Lock()
	mock.calls.HandleSubmitScore = append(mock.calls.HandleSubmitScore, callInfo)
	mock.lockHandleSubmitScore.Unlock()
	return mock.HandleSubmitScoreFunc(contextMoqParam, submitScoreRequest, s)
}

// HandleSubmitScoreCalls gets all the calls that were made to HandleSubmitScore.
// Check the length with:
//     len(mockedService.HandleSubmitScoreCalls())
func (mock *ServiceMock) HandleSubmitScoreCalls() []struct {
	ContextMoqParam    context.Context
	SubmitScoreRequest *models.SubmitScoreRequest
	S                  string
} {
	var calls []struct {
		ContextMoqParam    context.Context
		SubmitScoreRequest *models.SubmitScoreRequest
		S                  string
	}
	mock.lockHandleSubmitScore.RLock()
	calls = mock.calls.HandleSubmitScore
	mock.lockHandleSubmitScore.RUnlock()
	return calls
}
