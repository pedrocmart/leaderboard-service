// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/pedrocmart/leaderboard-service/models"
	"sync"
)

// Ensure, that StoreServiceMock does implement models.StoreService.
// If this is not the case, regenerate this file with moq.
var _ models.StoreService = &StoreServiceMock{}

// StoreServiceMock is a mock implementation of models.StoreService.
//
// 	func TestSomethingThatUsesStoreService(t *testing.T) {
//
// 		// make and configure a mocked models.StoreService
// 		mockedStoreService := &StoreServiceMock{
// 			CreateUserFunc: func(ctx context.Context, id int, total int) error {
// 				panic("mock out the CreateUser method")
// 			},
// 			DoesUserExistFunc: func(ctx context.Context, id int) (bool, error) {
// 				panic("mock out the DoesUserExist method")
// 			},
// 			GetUserByIdFunc: func(ctx context.Context, id int) (*models.User, error) {
// 				panic("mock out the GetUserById method")
// 			},
// 			GetUsersFunc: func(ctx context.Context, top int) ([]models.Ranking, error) {
// 				panic("mock out the GetUsers method")
// 			},
// 			GetUsersBetweenFunc: func(ctx context.Context, lower int, upper int) ([]models.Ranking, error) {
// 				panic("mock out the GetUsersBetween method")
// 			},
// 			UpdateAbsoluteUserScoreFunc: func(ctx context.Context, id int, score int) error {
// 				panic("mock out the UpdateAbsoluteUserScore method")
// 			},
// 			UpdateRelativeUserScoreFunc: func(ctx context.Context, id int, score int) error {
// 				panic("mock out the UpdateRelativeUserScore method")
// 			},
// 		}
//
// 		// use mockedStoreService in code that requires models.StoreService
// 		// and then make assertions.
//
// 	}
type StoreServiceMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, id int, total int) error

	// DoesUserExistFunc mocks the DoesUserExist method.
	DoesUserExistFunc func(ctx context.Context, id int) (bool, error)

	// GetUserByIdFunc mocks the GetUserById method.
	GetUserByIdFunc func(ctx context.Context, id int) (*models.User, error)

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func(ctx context.Context, top int) ([]models.Ranking, error)

	// GetUsersBetweenFunc mocks the GetUsersBetween method.
	GetUsersBetweenFunc func(ctx context.Context, lower int, upper int) ([]models.Ranking, error)

	// UpdateAbsoluteUserScoreFunc mocks the UpdateAbsoluteUserScore method.
	UpdateAbsoluteUserScoreFunc func(ctx context.Context, id int, score int) error

	// UpdateRelativeUserScoreFunc mocks the UpdateRelativeUserScore method.
	UpdateRelativeUserScoreFunc func(ctx context.Context, id int, score int) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
			// Total is the total argument value.
			Total int
		}
		// DoesUserExist holds details about calls to the DoesUserExist method.
		DoesUserExist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetUserById holds details about calls to the GetUserById method.
		GetUserById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Top is the top argument value.
			Top int
		}
		// GetUsersBetween holds details about calls to the GetUsersBetween method.
		GetUsersBetween []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Lower is the lower argument value.
			Lower int
			// Upper is the upper argument value.
			Upper int
		}
		// UpdateAbsoluteUserScore holds details about calls to the UpdateAbsoluteUserScore method.
		UpdateAbsoluteUserScore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
			// Score is the score argument value.
			Score int
		}
		// UpdateRelativeUserScore holds details about calls to the UpdateRelativeUserScore method.
		UpdateRelativeUserScore []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int
			// Score is the score argument value.
			Score int
		}
	}
	lockCreateUser              sync.RWMutex
	lockDoesUserExist           sync.RWMutex
	lockGetUserById             sync.RWMutex
	lockGetUsers                sync.RWMutex
	lockGetUsersBetween         sync.RWMutex
	lockUpdateAbsoluteUserScore sync.RWMutex
	lockUpdateRelativeUserScore sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *StoreServiceMock) CreateUser(ctx context.Context, id int, total int) error {
	if mock.CreateUserFunc == nil {
		panic("StoreServiceMock.CreateUserFunc: method is nil but StoreService.CreateUser was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    int
		Total int
	}{
		Ctx:   ctx,
		ID:    id,
		Total: total,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, id, total)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedStoreService.CreateUserCalls())
func (mock *StoreServiceMock) CreateUserCalls() []struct {
	Ctx   context.Context
	ID    int
	Total int
} {
	var calls []struct {
		Ctx   context.Context
		ID    int
		Total int
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// DoesUserExist calls DoesUserExistFunc.
func (mock *StoreServiceMock) DoesUserExist(ctx context.Context, id int) (bool, error) {
	if mock.DoesUserExistFunc == nil {
		panic("StoreServiceMock.DoesUserExistFunc: method is nil but StoreService.DoesUserExist was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDoesUserExist.Lock()
	mock.calls.DoesUserExist = append(mock.calls.DoesUserExist, callInfo)
	mock.lockDoesUserExist.Unlock()
	return mock.DoesUserExistFunc(ctx, id)
}

// DoesUserExistCalls gets all the calls that were made to DoesUserExist.
// Check the length with:
//     len(mockedStoreService.DoesUserExistCalls())
func (mock *StoreServiceMock) DoesUserExistCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockDoesUserExist.RLock()
	calls = mock.calls.DoesUserExist
	mock.lockDoesUserExist.RUnlock()
	return calls
}

// GetUserById calls GetUserByIdFunc.
func (mock *StoreServiceMock) GetUserById(ctx context.Context, id int) (*models.User, error) {
	if mock.GetUserByIdFunc == nil {
		panic("StoreServiceMock.GetUserByIdFunc: method is nil but StoreService.GetUserById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetUserById.Lock()
	mock.calls.GetUserById = append(mock.calls.GetUserById, callInfo)
	mock.lockGetUserById.Unlock()
	return mock.GetUserByIdFunc(ctx, id)
}

// GetUserByIdCalls gets all the calls that were made to GetUserById.
// Check the length with:
//     len(mockedStoreService.GetUserByIdCalls())
func (mock *StoreServiceMock) GetUserByIdCalls() []struct {
	Ctx context.Context
	ID  int
} {
	var calls []struct {
		Ctx context.Context
		ID  int
	}
	mock.lockGetUserById.RLock()
	calls = mock.calls.GetUserById
	mock.lockGetUserById.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *StoreServiceMock) GetUsers(ctx context.Context, top int) ([]models.Ranking, error) {
	if mock.GetUsersFunc == nil {
		panic("StoreServiceMock.GetUsersFunc: method is nil but StoreService.GetUsers was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Top int
	}{
		Ctx: ctx,
		Top: top,
	}
	mock.lockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	mock.lockGetUsers.Unlock()
	return mock.GetUsersFunc(ctx, top)
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//     len(mockedStoreService.GetUsersCalls())
func (mock *StoreServiceMock) GetUsersCalls() []struct {
	Ctx context.Context
	Top int
} {
	var calls []struct {
		Ctx context.Context
		Top int
	}
	mock.lockGetUsers.RLock()
	calls = mock.calls.GetUsers
	mock.lockGetUsers.RUnlock()
	return calls
}

// GetUsersBetween calls GetUsersBetweenFunc.
func (mock *StoreServiceMock) GetUsersBetween(ctx context.Context, lower int, upper int) ([]models.Ranking, error) {
	if mock.GetUsersBetweenFunc == nil {
		panic("StoreServiceMock.GetUsersBetweenFunc: method is nil but StoreService.GetUsersBetween was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Lower int
		Upper int
	}{
		Ctx:   ctx,
		Lower: lower,
		Upper: upper,
	}
	mock.lockGetUsersBetween.Lock()
	mock.calls.GetUsersBetween = append(mock.calls.GetUsersBetween, callInfo)
	mock.lockGetUsersBetween.Unlock()
	return mock.GetUsersBetweenFunc(ctx, lower, upper)
}

// GetUsersBetweenCalls gets all the calls that were made to GetUsersBetween.
// Check the length with:
//     len(mockedStoreService.GetUsersBetweenCalls())
func (mock *StoreServiceMock) GetUsersBetweenCalls() []struct {
	Ctx   context.Context
	Lower int
	Upper int
} {
	var calls []struct {
		Ctx   context.Context
		Lower int
		Upper int
	}
	mock.lockGetUsersBetween.RLock()
	calls = mock.calls.GetUsersBetween
	mock.lockGetUsersBetween.RUnlock()
	return calls
}

// UpdateAbsoluteUserScore calls UpdateAbsoluteUserScoreFunc.
func (mock *StoreServiceMock) UpdateAbsoluteUserScore(ctx context.Context, id int, score int) error {
	if mock.UpdateAbsoluteUserScoreFunc == nil {
		panic("StoreServiceMock.UpdateAbsoluteUserScoreFunc: method is nil but StoreService.UpdateAbsoluteUserScore was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    int
		Score int
	}{
		Ctx:   ctx,
		ID:    id,
		Score: score,
	}
	mock.lockUpdateAbsoluteUserScore.Lock()
	mock.calls.UpdateAbsoluteUserScore = append(mock.calls.UpdateAbsoluteUserScore, callInfo)
	mock.lockUpdateAbsoluteUserScore.Unlock()
	return mock.UpdateAbsoluteUserScoreFunc(ctx, id, score)
}

// UpdateAbsoluteUserScoreCalls gets all the calls that were made to UpdateAbsoluteUserScore.
// Check the length with:
//     len(mockedStoreService.UpdateAbsoluteUserScoreCalls())
func (mock *StoreServiceMock) UpdateAbsoluteUserScoreCalls() []struct {
	Ctx   context.Context
	ID    int
	Score int
} {
	var calls []struct {
		Ctx   context.Context
		ID    int
		Score int
	}
	mock.lockUpdateAbsoluteUserScore.RLock()
	calls = mock.calls.UpdateAbsoluteUserScore
	mock.lockUpdateAbsoluteUserScore.RUnlock()
	return calls
}

// UpdateRelativeUserScore calls UpdateRelativeUserScoreFunc.
func (mock *StoreServiceMock) UpdateRelativeUserScore(ctx context.Context, id int, score int) error {
	if mock.UpdateRelativeUserScoreFunc == nil {
		panic("StoreServiceMock.UpdateRelativeUserScoreFunc: method is nil but StoreService.UpdateRelativeUserScore was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    int
		Score int
	}{
		Ctx:   ctx,
		ID:    id,
		Score: score,
	}
	mock.lockUpdateRelativeUserScore.Lock()
	mock.calls.UpdateRelativeUserScore = append(mock.calls.UpdateRelativeUserScore, callInfo)
	mock.lockUpdateRelativeUserScore.Unlock()
	return mock.UpdateRelativeUserScoreFunc(ctx, id, score)
}

// UpdateRelativeUserScoreCalls gets all the calls that were made to UpdateRelativeUserScore.
// Check the length with:
//     len(mockedStoreService.UpdateRelativeUserScoreCalls())
func (mock *StoreServiceMock) UpdateRelativeUserScoreCalls() []struct {
	Ctx   context.Context
	ID    int
	Score int
} {
	var calls []struct {
		Ctx   context.Context
		ID    int
		Score int
	}
	mock.lockUpdateRelativeUserScore.RLock()
	calls = mock.calls.UpdateRelativeUserScore
	mock.lockUpdateRelativeUserScore.RUnlock()
	return calls
}
