// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/pedrocmart/leaderboard-service/models"
	"net/http"
	"sync"
)

// Ensure, that RequestResponseMock does implement models.RequestResponse.
// If this is not the case, regenerate this file with moq.
var _ models.RequestResponse = &RequestResponseMock{}

// RequestResponseMock is a mock implementation of models.RequestResponse.
//
// 	func TestSomethingThatUsesRequestResponse(t *testing.T) {
//
// 		// make and configure a mocked models.RequestResponse
// 		mockedRequestResponse := &RequestResponseMock{
// 			HandleErrorFunc: func(err error, w http.ResponseWriter, r *http.Request, status int)  {
// 				panic("mock out the HandleError method")
// 			},
// 			HandleResponseFunc: func(body interface{}, w http.ResponseWriter, r *http.Request, status int)  {
// 				panic("mock out the HandleResponse method")
// 			},
// 			ReadBodyAsJSONFunc: func(req *http.Request, dest interface{}) error {
// 				panic("mock out the ReadBodyAsJSON method")
// 			},
// 		}
//
// 		// use mockedRequestResponse in code that requires models.RequestResponse
// 		// and then make assertions.
//
// 	}
type RequestResponseMock struct {
	// HandleErrorFunc mocks the HandleError method.
	HandleErrorFunc func(err error, w http.ResponseWriter, r *http.Request, status int)

	// HandleResponseFunc mocks the HandleResponse method.
	HandleResponseFunc func(body interface{}, w http.ResponseWriter, r *http.Request, status int)

	// ReadBodyAsJSONFunc mocks the ReadBodyAsJSON method.
	ReadBodyAsJSONFunc func(req *http.Request, dest interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// HandleError holds details about calls to the HandleError method.
		HandleError []struct {
			// Err is the err argument value.
			Err error
			// W is the w argument value.
			W http.ResponseWriter
			// R is the r argument value.
			R *http.Request
			// Status is the status argument value.
			Status int
		}
		// HandleResponse holds details about calls to the HandleResponse method.
		HandleResponse []struct {
			// Body is the body argument value.
			Body interface{}
			// W is the w argument value.
			W http.ResponseWriter
			// R is the r argument value.
			R *http.Request
			// Status is the status argument value.
			Status int
		}
		// ReadBodyAsJSON holds details about calls to the ReadBodyAsJSON method.
		ReadBodyAsJSON []struct {
			// Req is the req argument value.
			Req *http.Request
			// Dest is the dest argument value.
			Dest interface{}
		}
	}
	lockHandleError    sync.RWMutex
	lockHandleResponse sync.RWMutex
	lockReadBodyAsJSON sync.RWMutex
}

// HandleError calls HandleErrorFunc.
func (mock *RequestResponseMock) HandleError(err error, w http.ResponseWriter, r *http.Request, status int) {
	if mock.HandleErrorFunc == nil {
		panic("RequestResponseMock.HandleErrorFunc: method is nil but RequestResponse.HandleError was just called")
	}
	callInfo := struct {
		Err    error
		W      http.ResponseWriter
		R      *http.Request
		Status int
	}{
		Err:    err,
		W:      w,
		R:      r,
		Status: status,
	}
	mock.lockHandleError.Lock()
	mock.calls.HandleError = append(mock.calls.HandleError, callInfo)
	mock.lockHandleError.Unlock()
	mock.HandleErrorFunc(err, w, r, status)
}

// HandleErrorCalls gets all the calls that were made to HandleError.
// Check the length with:
//     len(mockedRequestResponse.HandleErrorCalls())
func (mock *RequestResponseMock) HandleErrorCalls() []struct {
	Err    error
	W      http.ResponseWriter
	R      *http.Request
	Status int
} {
	var calls []struct {
		Err    error
		W      http.ResponseWriter
		R      *http.Request
		Status int
	}
	mock.lockHandleError.RLock()
	calls = mock.calls.HandleError
	mock.lockHandleError.RUnlock()
	return calls
}

// HandleResponse calls HandleResponseFunc.
func (mock *RequestResponseMock) HandleResponse(body interface{}, w http.ResponseWriter, r *http.Request, status int) {
	if mock.HandleResponseFunc == nil {
		panic("RequestResponseMock.HandleResponseFunc: method is nil but RequestResponse.HandleResponse was just called")
	}
	callInfo := struct {
		Body   interface{}
		W      http.ResponseWriter
		R      *http.Request
		Status int
	}{
		Body:   body,
		W:      w,
		R:      r,
		Status: status,
	}
	mock.lockHandleResponse.Lock()
	mock.calls.HandleResponse = append(mock.calls.HandleResponse, callInfo)
	mock.lockHandleResponse.Unlock()
	mock.HandleResponseFunc(body, w, r, status)
}

// HandleResponseCalls gets all the calls that were made to HandleResponse.
// Check the length with:
//     len(mockedRequestResponse.HandleResponseCalls())
func (mock *RequestResponseMock) HandleResponseCalls() []struct {
	Body   interface{}
	W      http.ResponseWriter
	R      *http.Request
	Status int
} {
	var calls []struct {
		Body   interface{}
		W      http.ResponseWriter
		R      *http.Request
		Status int
	}
	mock.lockHandleResponse.RLock()
	calls = mock.calls.HandleResponse
	mock.lockHandleResponse.RUnlock()
	return calls
}

// ReadBodyAsJSON calls ReadBodyAsJSONFunc.
func (mock *RequestResponseMock) ReadBodyAsJSON(req *http.Request, dest interface{}) error {
	if mock.ReadBodyAsJSONFunc == nil {
		panic("RequestResponseMock.ReadBodyAsJSONFunc: method is nil but RequestResponse.ReadBodyAsJSON was just called")
	}
	callInfo := struct {
		Req  *http.Request
		Dest interface{}
	}{
		Req:  req,
		Dest: dest,
	}
	mock.lockReadBodyAsJSON.Lock()
	mock.calls.ReadBodyAsJSON = append(mock.calls.ReadBodyAsJSON, callInfo)
	mock.lockReadBodyAsJSON.Unlock()
	return mock.ReadBodyAsJSONFunc(req, dest)
}

// ReadBodyAsJSONCalls gets all the calls that were made to ReadBodyAsJSON.
// Check the length with:
//     len(mockedRequestResponse.ReadBodyAsJSONCalls())
func (mock *RequestResponseMock) ReadBodyAsJSONCalls() []struct {
	Req  *http.Request
	Dest interface{}
} {
	var calls []struct {
		Req  *http.Request
		Dest interface{}
	}
	mock.lockReadBodyAsJSON.RLock()
	calls = mock.calls.ReadBodyAsJSON
	mock.lockReadBodyAsJSON.RUnlock()
	return calls
}
